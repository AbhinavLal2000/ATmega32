
UartRx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ca  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000898  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000035b  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ce  00000000  00000000  00000c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000290  00000000  00000000  00000d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000009e  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  8a:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_init>:
#include <avr/io.h>
#define F_CPU 1000000

void UART_init(unsigned int p)
{
	UCSRB |= (1 << RXEN);
  92:	54 9a       	sbi	0x0a, 4	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
  94:	20 b5       	in	r18, 0x20	; 32
  96:	26 68       	ori	r18, 0x86	; 134
  98:	20 bd       	out	0x20, r18	; 32
	UBRRL = (unsigned char)p;
  9a:	89 b9       	out	0x09, r24	; 9
	UBRRH = (unsigned char)(p >> 8);
  9c:	90 bd       	out	0x20, r25	; 32
}
  9e:	08 95       	ret

000000a0 <main>:


int main(void)
{
	DDRB = 0b00000110;
  a0:	86 e0       	ldi	r24, 0x06	; 6
  a2:	87 bb       	out	0x17, r24	; 23
	unsigned int ubr = 25;
	UART_init(ubr);
  a4:	89 e1       	ldi	r24, 0x19	; 25
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 49 00 	call	0x92	; 0x92 <UART_init>
		 {
			 PORTB = 0b00000010;
		 }
		 else if (r == 'B')
		 {
			 PORTB = 0b00000100;;
  ac:	24 e0       	ldi	r18, 0x04	; 4
    {
		 while(!(UCSRA & (1 << RXC)));
		 r = UDR;
		 if (r == 'A')
		 {
			 PORTB = 0b00000010;
  ae:	92 e0       	ldi	r25, 0x02	; 2
	unsigned int ubr = 25;
	UART_init(ubr);
	unsigned char r;
    while(1)
    {
		 while(!(UCSRA & (1 << RXC)));
  b0:	5f 9b       	sbis	0x0b, 7	; 11
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <main+0x10>
		 r = UDR;
  b4:	8c b1       	in	r24, 0x0c	; 12
		 if (r == 'A')
  b6:	81 34       	cpi	r24, 0x41	; 65
  b8:	11 f4       	brne	.+4      	; 0xbe <main+0x1e>
		 {
			 PORTB = 0b00000010;
  ba:	98 bb       	out	0x18, r25	; 24
  bc:	f9 cf       	rjmp	.-14     	; 0xb0 <main+0x10>
		 }
		 else if (r == 'B')
  be:	82 34       	cpi	r24, 0x42	; 66
  c0:	b9 f7       	brne	.-18     	; 0xb0 <main+0x10>
		 {
			 PORTB = 0b00000100;;
  c2:	28 bb       	out	0x18, r18	; 24
  c4:	f5 cf       	rjmp	.-22     	; 0xb0 <main+0x10>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
