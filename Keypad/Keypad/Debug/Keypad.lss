
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000002fc  00000370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000af0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005df  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b0  00000000  00000000  0000114f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d9  00000000  00000000  000012ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000119  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  0000186d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 83 00 	call	0x106	; 0x106 <main>
  8a:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <sendCmd>:
	sendCmd(0x0C); // display on cursor off
}

void sendCmd(unsigned char cmd)
{
	PORTD = cmd;
  92:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1<<RS);
  94:	a9 98       	cbi	0x15, 1	; 21
	PORTC |= (1<<E);
  96:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	87 e8       	ldi	r24, 0x87	; 135
  9a:	93 e1       	ldi	r25, 0x13	; 19
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <sendCmd+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <sendCmd+0x10>
  a2:	00 00       	nop
	_delay_ms(20);
	PORTC &= ~(1<<E);
  a4:	a8 98       	cbi	0x15, 0	; 21
	PORTC = 0;
  a6:	15 ba       	out	0x15, r1	; 21
}
  a8:	08 95       	ret

000000aa <lcdInit>:
 
#define RS 1
#define E  0

void lcdInit()
{
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
	sendCmd(0x38); // LCD 8 bit mode
  ae:	c9 e4       	ldi	r28, 0x49	; 73
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	88 e3       	ldi	r24, 0x38	; 56
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fe 01       	movw	r30, r28
  b8:	09 95       	icall
	sendCmd(0x01); // clear display
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fe 01       	movw	r30, r28
  c0:	09 95       	icall
	sendCmd(0x0C); // display on cursor off
  c2:	8c e0       	ldi	r24, 0x0C	; 12
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fe 01       	movw	r30, r28
  c8:	09 95       	icall
}
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <sendData>:
	PORTC &= ~(1<<E);
	PORTC = 0;
}
void sendData(unsigned char data)
{
	PORTD = data;
  d0:	82 bb       	out	0x12, r24	; 18
	PORTC |= (1<<RS);
  d2:	a9 9a       	sbi	0x15, 1	; 21
	PORTC |= (1<<E);
  d4:	a8 9a       	sbi	0x15, 0	; 21
  d6:	87 e8       	ldi	r24, 0x87	; 135
  d8:	93 e1       	ldi	r25, 0x13	; 19
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <sendData+0xa>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <sendData+0x10>
  e0:	00 00       	nop
	_delay_ms(20);
	PORTC &= ~(1<<E);
  e2:	a8 98       	cbi	0x15, 0	; 21
	PORTD = 0;
  e4:	12 ba       	out	0x12, r1	; 18
}
  e6:	08 95       	ret

000000e8 <sendString>:

void sendString(unsigned char *str)
{
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	ec 01       	movw	r28, r24
	int i = 0;
	while(str[i]!='\0')
  ee:	88 81       	ld	r24, Y
  f0:	88 23       	and	r24, r24
  f2:	31 f0       	breq	.+12     	; 0x100 <sendString+0x18>
	_delay_ms(20);
	PORTC &= ~(1<<E);
	PORTD = 0;
}

void sendString(unsigned char *str)
  f4:	21 96       	adiw	r28, 0x01	; 1
{
	int i = 0;
	while(str[i]!='\0')
	{
		sendData(str[i]);
  f6:	0e 94 68 00 	call	0xd0	; 0xd0 <sendData>
}

void sendString(unsigned char *str)
{
	int i = 0;
	while(str[i]!='\0')
  fa:	89 91       	ld	r24, Y+
  fc:	88 23       	and	r24, r24
  fe:	d9 f7       	brne	.-10     	; 0xf6 <sendString+0xe>
	{
		sendData(str[i]);
		i++;
	}
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <main>:
#include <util/delay.h>
#include "lcd.h"

int main(void)
{
	DDRA = 0b00001111;
 106:	8f e0       	ldi	r24, 0x0F	; 15
 108:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0b00000011;
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	81 bb       	out	0x11, r24	; 17
	lcdInit();
 112:	0e 94 55 00 	call	0xaa	; 0xaa <lcdInit>
	sendString("Keypad");
 116:	80 e6       	ldi	r24, 0x60	; 96
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
 11e:	8f e7       	ldi	r24, 0x7F	; 127
 120:	9a e1       	ldi	r25, 0x1A	; 26
 122:	a6 e0       	ldi	r26, 0x06	; 6
 124:	81 50       	subi	r24, 0x01	; 1
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	a0 40       	sbci	r26, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x1e>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x28>
 12e:	00 00       	nop
	_delay_ms(2000);
	sendCmd(0x01);
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
		PORTA = 0b00000001;
		_delay_ms(10);
		if (PINB & (1<<0))
		{
			sendCmd(0x80);
			sendString("1");
 136:	c7 e6       	ldi	r28, 0x67	; 103
 138:	d0 e0       	ldi	r29, 0x00	; 0
			sendString("7");	
		}
		else if (PINB & (1<<3))
		{
			sendCmd(0x80);
			sendString("*");
 13a:	0f 2e       	mov	r0, r31
 13c:	fd e6       	ldi	r31, 0x6D	; 109
 13e:	cf 2e       	mov	r12, r31
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	df 2e       	mov	r13, r31
 144:	f0 2d       	mov	r31, r0
			sendString("4");
		}
		else if (PINB & (1<<2))
		{
			sendCmd(0x80);
			sendString("7");	
 146:	0f 2e       	mov	r0, r31
 148:	fb e6       	ldi	r31, 0x6B	; 107
 14a:	4f 2e       	mov	r4, r31
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	5f 2e       	mov	r5, r31
 150:	f0 2d       	mov	r31, r0
			sendString("1");
		}			
		else if (PINB & (1<<1))
		{
			sendCmd(0x80);
			sendString("4");
 152:	0f 2e       	mov	r0, r31
 154:	f9 e6       	ldi	r31, 0x69	; 105
 156:	af 2e       	mov	r10, r31
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	bf 2e       	mov	r11, r31
 15c:	f0 2d       	mov	r31, r0
			sendString("5");
		}
		else if (PINB & (1<<2))
		{
			sendCmd(0x80);
			sendString("8");
 15e:	0f 2e       	mov	r0, r31
 160:	f3 e7       	ldi	r31, 0x73	; 115
 162:	2f 2e       	mov	r2, r31
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	3f 2e       	mov	r3, r31
 168:	f0 2d       	mov	r31, r0
			sendString("2");
		}
		else if (PINB & (1<<1))
		{
			sendCmd(0x80);
			sendString("5");
 16a:	0f 2e       	mov	r0, r31
 16c:	f1 e7       	ldi	r31, 0x71	; 113
 16e:	8f 2e       	mov	r8, r31
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	9f 2e       	mov	r9, r31
 174:	f0 2d       	mov	r31, r0
		PORTA = 0b00000010;
		_delay_ms(10);
		if (PINB & (1<<0))
		{
			sendCmd(0x80);
			sendString("2");
 176:	0f e6       	ldi	r16, 0x6F	; 111
 178:	10 e0       	ldi	r17, 0x00	; 0
			sendString("3");
		}
		else if (PINB & (1<<1))
		{
			sendCmd(0x80);
			sendString("6");
 17a:	0f 2e       	mov	r0, r31
 17c:	f9 e7       	ldi	r31, 0x79	; 121
 17e:	6f 2e       	mov	r6, r31
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	7f 2e       	mov	r7, r31
 184:	f0 2d       	mov	r31, r0
		PORTA = 0b00000100;
		_delay_ms(10);
		if (PINB & (1<<0))
		{
			sendCmd(0x80);
			sendString("3");
 186:	0f 2e       	mov	r0, r31
 188:	f7 e7       	ldi	r31, 0x77	; 119
 18a:	ef 2e       	mov	r14, r31
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	ff 2e       	mov	r15, r31
 190:	f0 2d       	mov	r31, r0
	sendString("Keypad");
	_delay_ms(2000);
	sendCmd(0x01);
    while(1)
    {
		PORTA = 0b00000001;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	8b bb       	out	0x1b, r24	; 27
 196:	a3 ec       	ldi	r26, 0xC3	; 195
 198:	b9 e0       	ldi	r27, 0x09	; 9
 19a:	11 97       	sbiw	r26, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0x94>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x9a>
 1a0:	00 00       	nop
		_delay_ms(10);
		if (PINB & (1<<0))
 1a2:	b0 9b       	sbis	0x16, 0	; 22
 1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <main+0xae>
		{
			sendCmd(0x80);
 1a6:	80 e8       	ldi	r24, 0x80	; 128
 1a8:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("1");
 1ac:	ce 01       	movw	r24, r28
 1ae:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
 1b2:	1a c0       	rjmp	.+52     	; 0x1e8 <main+0xe2>
		}			
		else if (PINB & (1<<1))
 1b4:	b1 9b       	sbis	0x16, 1	; 22
 1b6:	07 c0       	rjmp	.+14     	; 0x1c6 <main+0xc0>
		{
			sendCmd(0x80);
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("4");
 1be:	c5 01       	movw	r24, r10
 1c0:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
 1c4:	11 c0       	rjmp	.+34     	; 0x1e8 <main+0xe2>
		}
		else if (PINB & (1<<2))
 1c6:	b2 9b       	sbis	0x16, 2	; 22
 1c8:	07 c0       	rjmp	.+14     	; 0x1d8 <main+0xd2>
		{
			sendCmd(0x80);
 1ca:	80 e8       	ldi	r24, 0x80	; 128
 1cc:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("7");	
 1d0:	c2 01       	movw	r24, r4
 1d2:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
 1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <main+0xe2>
		}
		else if (PINB & (1<<3))
 1d8:	b3 9b       	sbis	0x16, 3	; 22
 1da:	06 c0       	rjmp	.+12     	; 0x1e8 <main+0xe2>
		{
			sendCmd(0x80);
 1dc:	80 e8       	ldi	r24, 0x80	; 128
 1de:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("*");
 1e2:	c6 01       	movw	r24, r12
 1e4:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
		}		
		
		PORTA = 0b00000010;
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	8b bb       	out	0x1b, r24	; 27
 1ec:	83 ec       	ldi	r24, 0xC3	; 195
 1ee:	99 e0       	ldi	r25, 0x09	; 9
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <main+0xea>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0xf0>
 1f6:	00 00       	nop
		_delay_ms(10);
		if (PINB & (1<<0))
 1f8:	b0 9b       	sbis	0x16, 0	; 22
 1fa:	07 c0       	rjmp	.+14     	; 0x20a <main+0x104>
		{
			sendCmd(0x80);
 1fc:	80 e8       	ldi	r24, 0x80	; 128
 1fe:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("2");
 202:	c8 01       	movw	r24, r16
 204:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
 208:	1b c0       	rjmp	.+54     	; 0x240 <main+0x13a>
		}
		else if (PINB & (1<<1))
 20a:	b1 9b       	sbis	0x16, 1	; 22
 20c:	07 c0       	rjmp	.+14     	; 0x21c <main+0x116>
		{
			sendCmd(0x80);
 20e:	80 e8       	ldi	r24, 0x80	; 128
 210:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("5");
 214:	c4 01       	movw	r24, r8
 216:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
 21a:	12 c0       	rjmp	.+36     	; 0x240 <main+0x13a>
		}
		else if (PINB & (1<<2))
 21c:	b2 9b       	sbis	0x16, 2	; 22
 21e:	07 c0       	rjmp	.+14     	; 0x22e <main+0x128>
		{
			sendCmd(0x80);
 220:	80 e8       	ldi	r24, 0x80	; 128
 222:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("8");
 226:	c1 01       	movw	r24, r2
 228:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
 22c:	09 c0       	rjmp	.+18     	; 0x240 <main+0x13a>
		}
		else if (PINB & (1<<3))
 22e:	b3 9b       	sbis	0x16, 3	; 22
 230:	07 c0       	rjmp	.+14     	; 0x240 <main+0x13a>
		{
			sendCmd(0x80);
 232:	80 e8       	ldi	r24, 0x80	; 128
 234:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("0");
 238:	85 e7       	ldi	r24, 0x75	; 117
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
		}
		
		PORTA = 0b00000100;
 240:	84 e0       	ldi	r24, 0x04	; 4
 242:	8b bb       	out	0x1b, r24	; 27
 244:	a3 ec       	ldi	r26, 0xC3	; 195
 246:	b9 e0       	ldi	r27, 0x09	; 9
 248:	11 97       	sbiw	r26, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <main+0x142>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0x148>
 24e:	00 00       	nop
		_delay_ms(10);
		if (PINB & (1<<0))
 250:	b0 9b       	sbis	0x16, 0	; 22
 252:	07 c0       	rjmp	.+14     	; 0x262 <main+0x15c>
		{
			sendCmd(0x80);
 254:	80 e8       	ldi	r24, 0x80	; 128
 256:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("3");
 25a:	c7 01       	movw	r24, r14
 25c:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
 260:	1c c0       	rjmp	.+56     	; 0x29a <main+0x194>
		}
		else if (PINB & (1<<1))
 262:	b1 9b       	sbis	0x16, 1	; 22
 264:	07 c0       	rjmp	.+14     	; 0x274 <main+0x16e>
		{
			sendCmd(0x80);
 266:	80 e8       	ldi	r24, 0x80	; 128
 268:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("6");
 26c:	c3 01       	movw	r24, r6
 26e:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
 272:	13 c0       	rjmp	.+38     	; 0x29a <main+0x194>
		}
		else if (PINB & (1<<2))
 274:	b2 9b       	sbis	0x16, 2	; 22
 276:	08 c0       	rjmp	.+16     	; 0x288 <main+0x182>
		{
			sendCmd(0x80);
 278:	80 e8       	ldi	r24, 0x80	; 128
 27a:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("9");
 27e:	8b e7       	ldi	r24, 0x7B	; 123
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
 286:	09 c0       	rjmp	.+18     	; 0x29a <main+0x194>
		}
		else if (PINB & (1<<3))
 288:	b3 9b       	sbis	0x16, 3	; 22
 28a:	07 c0       	rjmp	.+14     	; 0x29a <main+0x194>
		{
			sendCmd(0x80);
 28c:	80 e8       	ldi	r24, 0x80	; 128
 28e:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("=");
 292:	8d e7       	ldi	r24, 0x7D	; 125
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
		}
		
		PORTA = 0b00001000;
 29a:	88 e0       	ldi	r24, 0x08	; 8
 29c:	8b bb       	out	0x1b, r24	; 27
 29e:	83 ec       	ldi	r24, 0xC3	; 195
 2a0:	99 e0       	ldi	r25, 0x09	; 9
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <main+0x19c>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x1a2>
 2a8:	00 00       	nop
		_delay_ms(10);
		if (PINB & (1<<0))
 2aa:	b0 9b       	sbis	0x16, 0	; 22
 2ac:	08 c0       	rjmp	.+16     	; 0x2be <main+0x1b8>
		{
			sendCmd(0x80);
 2ae:	80 e8       	ldi	r24, 0x80	; 128
 2b0:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("+");
 2b4:	8f e7       	ldi	r24, 0x7F	; 127
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
 2bc:	6a cf       	rjmp	.-300    	; 0x192 <main+0x8c>
		}
		else if (PINB & (1<<1))
 2be:	b1 9b       	sbis	0x16, 1	; 22
 2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <main+0x1cc>
		{
			sendCmd(0x80);
 2c2:	80 e8       	ldi	r24, 0x80	; 128
 2c4:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("-");
 2c8:	81 e8       	ldi	r24, 0x81	; 129
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
 2d0:	60 cf       	rjmp	.-320    	; 0x192 <main+0x8c>
		}
		else if (PINB & (1<<2))
 2d2:	b2 9b       	sbis	0x16, 2	; 22
 2d4:	08 c0       	rjmp	.+16     	; 0x2e6 <main+0x1e0>
		{
			sendCmd(0x80);
 2d6:	80 e8       	ldi	r24, 0x80	; 128
 2d8:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("/");
 2dc:	83 e8       	ldi	r24, 0x83	; 131
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
 2e4:	56 cf       	rjmp	.-340    	; 0x192 <main+0x8c>
		}
		else if (PINB & (1<<3))
 2e6:	b3 9b       	sbis	0x16, 3	; 22
 2e8:	54 cf       	rjmp	.-344    	; 0x192 <main+0x8c>
		{
			sendCmd(0x80);
 2ea:	80 e8       	ldi	r24, 0x80	; 128
 2ec:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("*");
 2f0:	c6 01       	movw	r24, r12
 2f2:	0e 94 74 00 	call	0xe8	; 0xe8 <sendString>
 2f6:	4d cf       	rjmp	.-358    	; 0x192 <main+0x8c>

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
