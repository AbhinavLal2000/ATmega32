
Nokia 5110 LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000326  00800060  0000031a  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000e08  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ca  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000212  00000000  00000000  00001452  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ca  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001a30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017d  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f1  00000000  00000000  00001c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001f7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	13 e0       	ldi	r17, 0x03	; 3
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  8a:	0c 94 8b 01 	jmp	0x316	; 0x316 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinmode>:
#include "ascii_char.h"

void pinmode(void)
{
	// MOSI SCK RST DC BL SS as output, all others as input
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<RST) | (1<<DC) | (1<<BL) | (1<<SS);
  92:	87 b3       	in	r24, 0x17	; 23
  94:	8e 6b       	ori	r24, 0xBE	; 190
  96:	87 bb       	out	0x17, r24	; 23
}
  98:	08 95       	ret

0000009a <spi_init>:

void spi_init(void)
{
	// enable SPI in MASTER mode with fosc/128
	SPCR |= (1<<SPE) | (1<<MSTR) | (1<<SPR0) | (1<<SPR1);
  9a:	8d b1       	in	r24, 0x0d	; 13
  9c:	83 65       	ori	r24, 0x53	; 83
  9e:	8d b9       	out	0x0d, r24	; 13
	
	// SS HIGH
	PORTB |= (1<<SS);
  a0:	c4 9a       	sbi	0x18, 4	; 24
}
  a2:	08 95       	ret

000000a4 <spi_tx>:

void spi_tx(char data)
{
	// SS LOW
	PORTB &= ~(1<<SS);
  a4:	c4 98       	cbi	0x18, 4	; 24
	
	// sending data in register
	SPDR = data;
  a6:	8f b9       	out	0x0f, r24	; 15
	
	// wait till TX completes
	while(!(SPSR & (1<<SPIF)));
  a8:	77 9b       	sbis	0x0e, 7	; 14
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <spi_tx+0x4>
	
	// SS HIGH
	PORTB |= (1<<SS);
  ac:	c4 9a       	sbi	0x18, 4	; 24
	
}
  ae:	08 95       	ret

000000b0 <nokiaLCD_init>:

void nokiaLCD_init(void)
{
	// set pins
	pinmode();
  b0:	0e 94 49 00 	call	0x92	; 0x92 <pinmode>
	
	// RST pattern
	PORTB &= ~(1<<RST);
  b4:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	83 ec       	ldi	r24, 0xC3	; 195
  b8:	99 e0       	ldi	r25, 0x09	; 9
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <nokiaLCD_init+0xa>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <nokiaLCD_init+0x10>
  c0:	00 00       	nop
	_delay_ms(10);
	PORTB |= (1<<RST);
  c2:	c3 9a       	sbi	0x18, 3	; 24
	
	// DC LOW
	PORTB &= ~(1<<DC);
  c4:	c2 98       	cbi	0x18, 2	; 24
	
	// BL ON
	PORTB |= (1<<BL);
  c6:	c1 9a       	sbi	0x18, 1	; 24
	
	// initialize SPI
	spi_init();
  c8:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_init>
	
	// extended instruction set PD = 0, V = 0, H = 1
	spi_tx(0x21);
  cc:	81 e2       	ldi	r24, 0x21	; 33
  ce:	0e 94 52 00 	call	0xa4	; 0xa4 <spi_tx>
	
	// temp. coefficient TC1 = 0, TC0 = 1
	spi_tx(0x06);
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	0e 94 52 00 	call	0xa4	; 0xa4 <spi_tx>
	
	// set bias
	spi_tx(0x17);
  d8:	87 e1       	ldi	r24, 0x17	; 23
  da:	0e 94 52 00 	call	0xa4	; 0xa4 <spi_tx>
	
	// V op contrast
	spi_tx(0x92);
  de:	82 e9       	ldi	r24, 0x92	; 146
  e0:	0e 94 52 00 	call	0xa4	; 0xa4 <spi_tx>
	
	// basic instruction set PD = 0, V = 0, H = 0
	spi_tx(0x20);
  e4:	80 e2       	ldi	r24, 0x20	; 32
  e6:	0e 94 52 00 	call	0xa4	; 0xa4 <spi_tx>
	
	// normal display
	spi_tx(0x0C);
  ea:	8c e0       	ldi	r24, 0x0C	; 12
  ec:	0e 94 52 00 	call	0xa4	; 0xa4 <spi_tx>
	
}
  f0:	08 95       	ret

000000f2 <nokiaLCD_pos>:

void nokiaLCD_pos(short ypos, short xpos)
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	d8 2f       	mov	r29, r24
  f8:	c6 2f       	mov	r28, r22
	// DC LOW
	PORTB &= ~(1<<DC);
  fa:	c2 98       	cbi	0x18, 2	; 24
	
	// basic mode
	spi_tx(0x20);
  fc:	80 e2       	ldi	r24, 0x20	; 32
  fe:	0e 94 52 00 	call	0xa4	; 0xa4 <spi_tx>
	
	// making position
	spi_tx(0x40 | ypos);
 102:	8d 2f       	mov	r24, r29
 104:	80 64       	ori	r24, 0x40	; 64
 106:	0e 94 52 00 	call	0xa4	; 0xa4 <spi_tx>
	spi_tx(0x80 | xpos);
 10a:	8c 2f       	mov	r24, r28
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	0e 94 52 00 	call	0xa4	; 0xa4 <spi_tx>
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <nokiaLCD_print>:

void nokiaLCD_print(short ypos, short xpos, char str[])
{
 118:	af 92       	push	r10
 11a:	bf 92       	push	r11
 11c:	cf 92       	push	r12
 11e:	df 92       	push	r13
 120:	ef 92       	push	r14
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	8a 01       	movw	r16, r20
	int i = 0, j = 0;
	nokiaLCD_pos(ypos,xpos);
 12e:	0e 94 79 00 	call	0xf2	; 0xf2 <nokiaLCD_pos>
	
	// DC HIGH
	PORTB |= (1<<DC);
 132:	c2 9a       	sbi	0x18, 2	; 24
	
	// print string acc. to ASCII table in header
	while (str[i])
 134:	f8 01       	movw	r30, r16
 136:	80 81       	ld	r24, Z
 138:	88 23       	and	r24, r24
 13a:	71 f1       	breq	.+92     	; 0x198 <nokiaLCD_print+0x80>
	// making position
	spi_tx(0x40 | ypos);
	spi_tx(0x80 | xpos);
}

void nokiaLCD_print(short ypos, short xpos, char str[])
 13c:	68 01       	movw	r12, r16
 13e:	08 94       	sec
 140:	c1 1c       	adc	r12, r1
 142:	d1 1c       	adc	r13, r1
{
 144:	aa 24       	eor	r10, r10
 146:	bb 24       	eor	r11, r11
	// print string acc. to ASCII table in header
	while (str[i])
	{
		for (j=0;j<5;j++)
		{
			spi_tx(ASCII[str[i]-32][j]);
 148:	0f 2e       	mov	r0, r31
 14a:	f6 ea       	ldi	r31, 0xA6	; 166
 14c:	ef 2e       	mov	r14, r31
 14e:	f1 e0       	ldi	r31, 0x01	; 1
 150:	ff 2e       	mov	r15, r31
 152:	f0 2d       	mov	r31, r0
 154:	1f c0       	rjmp	.+62     	; 0x194 <nokiaLCD_print+0x7c>
 156:	f8 01       	movw	r30, r16
 158:	80 81       	ld	r24, Z
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	80 97       	sbiw	r24, 0x20	; 32
 15e:	9c 01       	movw	r18, r24
 160:	22 0f       	add	r18, r18
 162:	33 1f       	adc	r19, r19
 164:	22 0f       	add	r18, r18
 166:	33 1f       	adc	r19, r19
 168:	82 0f       	add	r24, r18
 16a:	93 1f       	adc	r25, r19
 16c:	8c 0f       	add	r24, r28
 16e:	9d 1f       	adc	r25, r29
 170:	8e 0d       	add	r24, r14
 172:	9f 1d       	adc	r25, r15
 174:	fc 01       	movw	r30, r24
 176:	80 81       	ld	r24, Z
 178:	0e 94 52 00 	call	0xa4	; 0xa4 <spi_tx>
	PORTB |= (1<<DC);
	
	// print string acc. to ASCII table in header
	while (str[i])
	{
		for (j=0;j<5;j++)
 17c:	21 96       	adiw	r28, 0x01	; 1
 17e:	c5 30       	cpi	r28, 0x05	; 5
 180:	d1 05       	cpc	r29, r1
 182:	49 f7       	brne	.-46     	; 0x156 <nokiaLCD_print+0x3e>
	
	// DC HIGH
	PORTB |= (1<<DC);
	
	// print string acc. to ASCII table in header
	while (str[i])
 184:	86 01       	movw	r16, r12
 186:	08 94       	sec
 188:	c1 1c       	adc	r12, r1
 18a:	d1 1c       	adc	r13, r1
 18c:	f8 01       	movw	r30, r16
 18e:	80 81       	ld	r24, Z
 190:	88 23       	and	r24, r24
 192:	11 f0       	breq	.+4      	; 0x198 <nokiaLCD_print+0x80>
	spi_tx(0x40 | ypos);
	spi_tx(0x80 | xpos);
}

void nokiaLCD_print(short ypos, short xpos, char str[])
{
 194:	e5 01       	movw	r28, r10
 196:	df cf       	rjmp	.-66     	; 0x156 <nokiaLCD_print+0x3e>
		}
		i++;
	}
	
	// DC LOW
	PORTB &= ~(1<<DC);
 198:	c2 98       	cbi	0x18, 2	; 24
}	
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	ff 90       	pop	r15
 1a4:	ef 90       	pop	r14
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	bf 90       	pop	r11
 1ac:	af 90       	pop	r10
 1ae:	08 95       	ret

000001b0 <nokiaLCD_clear>:

void nokiaLCD_clear(void)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
	// start from pos 0,0
	nokiaLCD_pos(0,0);
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	0e 94 79 00 	call	0xf2	; 0xf2 <nokiaLCD_pos>
	
	// DC ON
	PORTB |= (1<<DC);
 1c0:	c2 9a       	sbi	0x18, 2	; 24
 1c2:	c8 ef       	ldi	r28, 0xF8	; 248
 1c4:	d1 e0       	ldi	r29, 0x01	; 1
	
	// iterate 0x00 in whole display
	for (int i=0;i<504;i++)
	{
		spi_tx(0x00);
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 52 00 	call	0xa4	; 0xa4 <spi_tx>
 1cc:	21 97       	sbiw	r28, 0x01	; 1
	
	// DC ON
	PORTB |= (1<<DC);
	
	// iterate 0x00 in whole display
	for (int i=0;i<504;i++)
 1ce:	d9 f7       	brne	.-10     	; 0x1c6 <nokiaLCD_clear+0x16>
	{
		spi_tx(0x00);
	}
	
	// DC OFF
	PORTB &= ~(1<<DC);
 1d0:	c2 98       	cbi	0x18, 2	; 24
}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <main>:
	int i = 0;
	int j = 0;
	int k = 0;
	int y = 1;
	
	nokiaLCD_init();
 1d8:	0e 94 58 00 	call	0xb0	; 0xb0 <nokiaLCD_init>
	nokiaLCD_clear();
 1dc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <nokiaLCD_clear>
	nokiaLCD_print(3,15," STOPWATCH ");
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	6f e0       	ldi	r22, 0x0F	; 15
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	40 e6       	ldi	r20, 0x60	; 96
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	0e 94 8c 00 	call	0x118	; 0x118 <nokiaLCD_print>
	nokiaLCD_print(5,15,"     AL    ");
 1f0:	85 e0       	ldi	r24, 0x05	; 5
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	6f e0       	ldi	r22, 0x0F	; 15
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	4c e6       	ldi	r20, 0x6C	; 108
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	0e 94 8c 00 	call	0x118	; 0x118 <nokiaLCD_print>
	nokiaLCD_print(y,58,"00");
 200:	c8 e7       	ldi	r28, 0x78	; 120
 202:	d0 e0       	ldi	r29, 0x00	; 0
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	6a e3       	ldi	r22, 0x3A	; 58
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	ae 01       	movw	r20, r28
 20e:	0e 94 8c 00 	call	0x118	; 0x118 <nokiaLCD_print>
	nokiaLCD_print(y,51,":");
 212:	0b e7       	ldi	r16, 0x7B	; 123
 214:	10 e0       	ldi	r17, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	63 e3       	ldi	r22, 0x33	; 51
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	a8 01       	movw	r20, r16
 220:	0e 94 8c 00 	call	0x118	; 0x118 <nokiaLCD_print>
	nokiaLCD_print(y,38,"00");
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	66 e2       	ldi	r22, 0x26	; 38
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	ae 01       	movw	r20, r28
 22e:	0e 94 8c 00 	call	0x118	; 0x118 <nokiaLCD_print>
	nokiaLCD_print(y,31,":");
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	6f e1       	ldi	r22, 0x1F	; 31
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	a8 01       	movw	r20, r16
 23c:	0e 94 8c 00 	call	0x118	; 0x118 <nokiaLCD_print>
	nokiaLCD_print(y,18,"00");
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	62 e1       	ldi	r22, 0x12	; 18
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	ae 01       	movw	r20, r28
 24a:	0e 94 8c 00 	call	0x118	; 0x118 <nokiaLCD_print>

int main(void)
{
	int i = 0;
	int j = 0;
	int k = 0;
 24e:	aa 24       	eor	r10, r10
 250:	bb 24       	eor	r11, r11
				,"50","51","52","53","54","55","56","57","58","59"};

int main(void)
{
	int i = 0;
	int j = 0;
 252:	cc 24       	eor	r12, r12
 254:	dd 24       	eor	r13, r13
	nokiaLCD_print(y,31,":");
	nokiaLCD_print(y,18,"00");
	
	while (1)
	{
		for (i=0;i<60;i++)
 256:	c0 e0       	ldi	r28, 0x00	; 0
 258:	d0 e0       	ldi	r29, 0x00	; 0
		{
			nokiaLCD_print(y,58,nums[i]);
 25a:	0e e2       	ldi	r16, 0x2E	; 46
 25c:	11 e0       	ldi	r17, 0x01	; 1
	nokiaLCD_print(y,31,":");
	nokiaLCD_print(y,18,"00");
	
	while (1)
	{
		for (i=0;i<60;i++)
 25e:	ee 24       	eor	r14, r14
 260:	ff 24       	eor	r15, r15
 262:	41 c0       	rjmp	.+130    	; 0x2e6 <main+0x10e>
		{
			nokiaLCD_print(y,58,nums[i]);
 264:	ce 01       	movw	r24, r28
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	80 0f       	add	r24, r16
 26c:	91 1f       	adc	r25, r17
 26e:	dc 01       	movw	r26, r24
 270:	4d 91       	ld	r20, X+
 272:	5c 91       	ld	r21, X
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	6a e3       	ldi	r22, 0x3A	; 58
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	0e 94 8c 00 	call	0x118	; 0x118 <nokiaLCD_print>
 280:	87 e7       	ldi	r24, 0x77	; 119
 282:	9c e0       	ldi	r25, 0x0C	; 12
 284:	a3 e0       	ldi	r26, 0x03	; 3
 286:	81 50       	subi	r24, 0x01	; 1
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	a0 40       	sbci	r26, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0xae>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0xb8>
 290:	00 00       	nop
			_delay_ms(999);
			
			if (i == 59)
 292:	cb 33       	cpi	r28, 0x3B	; 59
 294:	d1 05       	cpc	r29, r1
 296:	89 f4       	brne	.+34     	; 0x2ba <main+0xe2>
			{
				j++;
 298:	08 94       	sec
 29a:	c1 1c       	adc	r12, r1
 29c:	d1 1c       	adc	r13, r1
				nokiaLCD_print(y,38,nums[j]);
 29e:	c6 01       	movw	r24, r12
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	80 0f       	add	r24, r16
 2a6:	91 1f       	adc	r25, r17
 2a8:	dc 01       	movw	r26, r24
 2aa:	4d 91       	ld	r20, X+
 2ac:	5c 91       	ld	r21, X
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	66 e2       	ldi	r22, 0x26	; 38
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	0e 94 8c 00 	call	0x118	; 0x118 <nokiaLCD_print>
			}
			
			if (j == 59)
 2ba:	bb e3       	ldi	r27, 0x3B	; 59
 2bc:	cb 16       	cp	r12, r27
 2be:	d1 04       	cpc	r13, r1
 2c0:	89 f4       	brne	.+34     	; 0x2e4 <main+0x10c>
			{
				k++;
 2c2:	08 94       	sec
 2c4:	a1 1c       	adc	r10, r1
 2c6:	b1 1c       	adc	r11, r1
				nokiaLCD_print(y,18,nums[k]);
 2c8:	f5 01       	movw	r30, r10
 2ca:	ee 0f       	add	r30, r30
 2cc:	ff 1f       	adc	r31, r31
 2ce:	e0 0f       	add	r30, r16
 2d0:	f1 1f       	adc	r31, r17
 2d2:	40 81       	ld	r20, Z
 2d4:	51 81       	ldd	r21, Z+1	; 0x01
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	62 e1       	ldi	r22, 0x12	; 18
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	0e 94 8c 00 	call	0x118	; 0x118 <nokiaLCD_print>
				j = 0;
 2e2:	67 01       	movw	r12, r14
	nokiaLCD_print(y,31,":");
	nokiaLCD_print(y,18,"00");
	
	while (1)
	{
		for (i=0;i<60;i++)
 2e4:	21 96       	adiw	r28, 0x01	; 1
 2e6:	cc 33       	cpi	r28, 0x3C	; 60
 2e8:	d1 05       	cpc	r29, r1
 2ea:	0c f4       	brge	.+2      	; 0x2ee <main+0x116>
 2ec:	bb cf       	rjmp	.-138    	; 0x264 <main+0x8c>
		{
			nokiaLCD_print(y,58,nums[i]);
 2ee:	f8 01       	movw	r30, r16
 2f0:	40 81       	ld	r20, Z
 2f2:	51 81       	ldd	r21, Z+1	; 0x01
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	6a e3       	ldi	r22, 0x3A	; 58
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	0e 94 8c 00 	call	0x118	; 0x118 <nokiaLCD_print>
 300:	87 e7       	ldi	r24, 0x77	; 119
 302:	9c e0       	ldi	r25, 0x0C	; 12
 304:	a3 e0       	ldi	r26, 0x03	; 3
 306:	81 50       	subi	r24, 0x01	; 1
 308:	90 40       	sbci	r25, 0x00	; 0
 30a:	a0 40       	sbci	r26, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x12e>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x138>
 310:	00 00       	nop
	nokiaLCD_print(y,31,":");
	nokiaLCD_print(y,18,"00");
	
	while (1)
	{
		for (i=0;i<60;i++)
 312:	e7 01       	movw	r28, r14
 314:	d2 cf       	rjmp	.-92     	; 0x2ba <main+0xe2>

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
