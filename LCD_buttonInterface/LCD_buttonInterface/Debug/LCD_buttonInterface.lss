
LCD_buttonInterface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000148  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000920  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004aa  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000196  00000000  00000000  00000e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000372  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000140  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  8a:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <sendCmd>:
	sendCmd(0x80); // force cursor from 1 line
}

void sendCmd(unsigned char cmd)
{
	PORTD = cmd;
  92:	82 bb       	out	0x12, r24	; 18
	PORTB &= ~(1<<RS);
  94:	c1 98       	cbi	0x18, 1	; 24
	PORTB |= (1<<E);
  96:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	87 e8       	ldi	r24, 0x87	; 135
  9a:	93 e1       	ldi	r25, 0x13	; 19
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <sendCmd+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <sendCmd+0x10>
  a2:	00 00       	nop
	_delay_ms(20);
	PORTB &= ~(1<<E);
  a4:	c0 98       	cbi	0x18, 0	; 24
	PORTB = 0;
  a6:	18 ba       	out	0x18, r1	; 24
}
  a8:	08 95       	ret

000000aa <lcdInit>:
 
#define RS 1
#define E  0

void lcdInit()
{
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
	sendCmd(0x38); // LCD 8 bit mode
  ae:	c9 e4       	ldi	r28, 0x49	; 73
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	88 e3       	ldi	r24, 0x38	; 56
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fe 01       	movw	r30, r28
  b8:	09 95       	icall
	sendCmd(0x01); // clear display
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fe 01       	movw	r30, r28
  c0:	09 95       	icall
	sendCmd(0x0C); // display on cursor off
  c2:	8c e0       	ldi	r24, 0x0C	; 12
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fe 01       	movw	r30, r28
  c8:	09 95       	icall
	sendCmd(0x80); // force cursor from 1 line
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	fe 01       	movw	r30, r28
  d0:	09 95       	icall
}
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <sendData>:
	PORTB &= ~(1<<E);
	PORTB = 0;
}
void sendData(unsigned char data)
{
	PORTD = data;
  d8:	82 bb       	out	0x12, r24	; 18
	PORTB |= (1<<RS);
  da:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= (1<<E);
  dc:	c0 9a       	sbi	0x18, 0	; 24
  de:	87 e8       	ldi	r24, 0x87	; 135
  e0:	93 e1       	ldi	r25, 0x13	; 19
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <sendData+0xa>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <sendData+0x10>
  e8:	00 00       	nop
	_delay_ms(20);
	PORTB &= ~(1<<E);
  ea:	c0 98       	cbi	0x18, 0	; 24
	PORTD = 0;
  ec:	12 ba       	out	0x12, r1	; 18
}
  ee:	08 95       	ret

000000f0 <sendString>:

void sendString(unsigned char *str)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	ec 01       	movw	r28, r24
	int i = 0;
	while(str[i]!='\0')
  f6:	88 81       	ld	r24, Y
  f8:	88 23       	and	r24, r24
  fa:	31 f0       	breq	.+12     	; 0x108 <sendString+0x18>
	_delay_ms(20);
	PORTB &= ~(1<<E);
	PORTD = 0;
}

void sendString(unsigned char *str)
  fc:	21 96       	adiw	r28, 0x01	; 1
{
	int i = 0;
	while(str[i]!='\0')
	{
		sendData(str[i]);
  fe:	0e 94 6c 00 	call	0xd8	; 0xd8 <sendData>
}

void sendString(unsigned char *str)
{
	int i = 0;
	while(str[i]!='\0')
 102:	89 91       	ld	r24, Y+
 104:	88 23       	and	r24, r24
 106:	d9 f7       	brne	.-10     	; 0xfe <sendString+0xe>
	{
		sendData(str[i]);
		i++;
	}
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <main>:
#include <util/delay.h>
#include "lcd.h"

int main(void)
{
	DDRD = 0xFF;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	81 bb       	out	0x11, r24	; 17
	DDRB = 0b00000011;
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	87 bb       	out	0x17, r24	; 23
	DDRA = 0b00000000;
 116:	1a ba       	out	0x1a, r1	; 26
	lcdInit();
 118:	0e 94 55 00 	call	0xaa	; 0xaa <lcdInit>
    while(1)
    {
		if (PINA & (1<<0))
		{
			sendCmd(0x80);
			sendString("HIGH");
 11c:	00 e6       	ldi	r16, 0x60	; 96
 11e:	10 e0       	ldi	r17, 0x00	; 0
		}
		else
		{
			sendCmd(0x80);
			sendString("LOW ");
 120:	c5 e6       	ldi	r28, 0x65	; 101
 122:	d0 e0       	ldi	r29, 0x00	; 0
	DDRB = 0b00000011;
	DDRA = 0b00000000;
	lcdInit();
    while(1)
    {
		if (PINA & (1<<0))
 124:	c8 9b       	sbis	0x19, 0	; 25
 126:	07 c0       	rjmp	.+14     	; 0x136 <main+0x28>
		{
			sendCmd(0x80);
 128:	80 e8       	ldi	r24, 0x80	; 128
 12a:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("HIGH");
 12e:	c8 01       	movw	r24, r16
 130:	0e 94 78 00 	call	0xf0	; 0xf0 <sendString>
 134:	f7 cf       	rjmp	.-18     	; 0x124 <main+0x16>
		}
		else
		{
			sendCmd(0x80);
 136:	80 e8       	ldi	r24, 0x80	; 128
 138:	0e 94 49 00 	call	0x92	; 0x92 <sendCmd>
			sendString("LOW ");
 13c:	ce 01       	movw	r24, r28
 13e:	0e 94 78 00 	call	0xf0	; 0xf0 <sendString>
 142:	f0 cf       	rjmp	.-32     	; 0x124 <main+0x16>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
