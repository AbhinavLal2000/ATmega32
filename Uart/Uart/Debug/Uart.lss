
Uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  0000015c  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000950  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004bf  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001bc  00000000  00000000  00000e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000366  00000000  00000000  0000104b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000013b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000103  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009b  00000000  00000000  0000150b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000015a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  8a:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_init>:

#define F_CPU 1000000

void UART_init(unsigned int pre)
{
	UCSRB |= (1 << TXEN);
  92:	53 9a       	sbi	0x0a, 3	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
  94:	20 b5       	in	r18, 0x20	; 32
  96:	26 68       	ori	r18, 0x86	; 134
  98:	20 bd       	out	0x20, r18	; 32
	UBRRL = (unsigned char)pre;
  9a:	89 b9       	out	0x09, r24	; 9
	UBRRH = (unsigned char)(pre >> 8);
  9c:	90 bd       	out	0x20, r25	; 32
}
  9e:	08 95       	ret

000000a0 <UART_send>:

void UART_send(unsigned int data)
{
	while(!(UCSRA & (1 << UDRE)));
  a0:	5d 9b       	sbis	0x0b, 5	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <UART_send>
	UDR = data;
  a4:	8c b9       	out	0x0c, r24	; 12
}
  a6:	08 95       	ret

000000a8 <main>:

int main(void)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	a6 97       	sbiw	r28, 0x26	; 38
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
	unsigned int ubr = 25;
	unsigned char *n[] = {'A','B','H','I','N','A','V',' '};
  bc:	de 01       	movw	r26, r28
  be:	11 96       	adiw	r26, 0x01	; 1
  c0:	e0 e6       	ldi	r30, 0x60	; 96
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 e1       	ldi	r24, 0x10	; 16
  c6:	01 90       	ld	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	81 50       	subi	r24, 0x01	; 1
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x1e>
	unsigned char *m[] = {'0','1','2','3','4','5','6','7','8','9',' '};
  ce:	de 01       	movw	r26, r28
  d0:	51 96       	adiw	r26, 0x11	; 17
  d2:	e0 e7       	ldi	r30, 0x70	; 112
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	86 e1       	ldi	r24, 0x16	; 22
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	81 50       	subi	r24, 0x01	; 1
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x30>
	UART_init(ubr);
  e0:	89 e1       	ldi	r24, 0x19	; 25
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <UART_init>
    while(1)
    {
		for (unsigned int i=0;i<8;i++)
  e8:	00 e0       	ldi	r16, 0x00	; 0
  ea:	10 e0       	ldi	r17, 0x00	; 0
{
	while(!(UCSRA & (1 << UDRE)));
	UDR = data;
}

int main(void)
  ec:	0f 2e       	mov	r0, r31
  ee:	f7 e2       	ldi	r31, 0x27	; 39
  f0:	ef 2e       	mov	r14, r31
  f2:	ff 24       	eor	r15, r15
  f4:	f0 2d       	mov	r31, r0
  f6:	ec 0e       	add	r14, r28
  f8:	fd 1e       	adc	r15, r29
	unsigned char *n[] = {'A','B','H','I','N','A','V',' '};
	unsigned char *m[] = {'0','1','2','3','4','5','6','7','8','9',' '};
	UART_init(ubr);
    while(1)
    {
		for (unsigned int i=0;i<8;i++)
  fa:	cc 24       	eor	r12, r12
  fc:	dd 24       	eor	r13, r13
  fe:	15 c0       	rjmp	.+42     	; 0x12a <main+0x82>
		{
			UART_send(n[i]);
 100:	f8 01       	movw	r30, r16
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	8c 0f       	add	r24, r28
 10c:	9d 1f       	adc	r25, r29
 10e:	e8 0f       	add	r30, r24
 110:	f9 1f       	adc	r31, r25
 112:	80 81       	ld	r24, Z
 114:	91 81       	ldd	r25, Z+1	; 0x01
 116:	0e 94 50 00 	call	0xa0	; 0xa0 <UART_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	e3 e2       	ldi	r30, 0x23	; 35
 11c:	f4 ef       	ldi	r31, 0xF4	; 244
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x76>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x7c>
 124:	00 00       	nop
	unsigned char *n[] = {'A','B','H','I','N','A','V',' '};
	unsigned char *m[] = {'0','1','2','3','4','5','6','7','8','9',' '};
	UART_init(ubr);
    while(1)
    {
		for (unsigned int i=0;i<8;i++)
 126:	0f 5f       	subi	r16, 0xFF	; 255
 128:	1f 4f       	sbci	r17, 0xFF	; 255
 12a:	08 30       	cpi	r16, 0x08	; 8
 12c:	11 05       	cpc	r17, r1
 12e:	40 f3       	brcs	.-48     	; 0x100 <main+0x58>
 130:	8e 01       	movw	r16, r28
 132:	0f 5e       	subi	r16, 0xEF	; 239
 134:	1f 4f       	sbci	r17, 0xFF	; 255
			UART_send(n[i]);
			_delay_ms(250);
		}
		for (unsigned int j=0;j<11;j++)
		{
			UART_send(m[j]);
 136:	f8 01       	movw	r30, r16
 138:	81 91       	ld	r24, Z+
 13a:	91 91       	ld	r25, Z+
 13c:	8f 01       	movw	r16, r30
 13e:	0e 94 50 00 	call	0xa0	; 0xa0 <UART_send>
 142:	83 e2       	ldi	r24, 0x23	; 35
 144:	94 ef       	ldi	r25, 0xF4	; 244
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0x9e>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0xa4>
 14c:	00 00       	nop
		for (unsigned int i=0;i<8;i++)
		{
			UART_send(n[i]);
			_delay_ms(250);
		}
		for (unsigned int j=0;j<11;j++)
 14e:	0e 15       	cp	r16, r14
 150:	1f 05       	cpc	r17, r15
 152:	89 f7       	brne	.-30     	; 0x136 <main+0x8e>
	unsigned char *n[] = {'A','B','H','I','N','A','V',' '};
	unsigned char *m[] = {'0','1','2','3','4','5','6','7','8','9',' '};
	UART_init(ubr);
    while(1)
    {
		for (unsigned int i=0;i<8;i++)
 154:	86 01       	movw	r16, r12
 156:	e9 cf       	rjmp	.-46     	; 0x12a <main+0x82>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
