
Function_Generator_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000294  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000294  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000057a  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001bb  00000000  00000000  0000109a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003dd  00000000  00000000  00001255  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001634  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000146  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021c  00000000  00000000  000017f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 34       	cpi	r26, 0x42	; 66
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  9e:	0c 94 48 01 	jmp	0x290	; 0x290 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <sendCmd>:
	sendCmd(0x0C); // display on cursor off
}

void sendCmd(unsigned char cmd)
{
	PORTD = cmd;
  a6:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~(1<<RS);
  a8:	29 98       	cbi	0x05, 1	; 5
	PORTB |= (1<<E);
  aa:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	93 e1       	ldi	r25, 0x13	; 19
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <sendCmd+0xa>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <sendCmd+0x10>
  b6:	00 00       	nop
	_delay_ms(20);
	PORTB &= ~(1<<E);
  b8:	28 98       	cbi	0x05, 0	; 5
	PORTB = 0;
  ba:	15 b8       	out	0x05, r1	; 5
}
  bc:	08 95       	ret

000000be <lcdInit>:
 
#define RS 1
#define E  0

void lcdInit()
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
	sendCmd(0x38); // LCD 8 bit mode
  c2:	c3 e5       	ldi	r28, 0x53	; 83
  c4:	d0 e0       	ldi	r29, 0x00	; 0
  c6:	88 e3       	ldi	r24, 0x38	; 56
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fe 01       	movw	r30, r28
  cc:	09 95       	icall
	sendCmd(0x01); // clear display
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fe 01       	movw	r30, r28
  d4:	09 95       	icall
	sendCmd(0x0C); // display on cursor off
  d6:	8c e0       	ldi	r24, 0x0C	; 12
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	fe 01       	movw	r30, r28
  dc:	09 95       	icall
}
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <sendData>:
	PORTB &= ~(1<<E);
	PORTB = 0;
}
void sendData(unsigned char data)
{
	PORTD = data;
  e4:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<RS);
  e6:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<E);
  e8:	28 9a       	sbi	0x05, 0	; 5
  ea:	87 e8       	ldi	r24, 0x87	; 135
  ec:	93 e1       	ldi	r25, 0x13	; 19
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <sendData+0xa>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <sendData+0x10>
  f4:	00 00       	nop
	_delay_ms(20);
	PORTB &= ~(1<<E);
  f6:	28 98       	cbi	0x05, 0	; 5
	PORTD = 0;
  f8:	1b b8       	out	0x0b, r1	; 11
}
  fa:	08 95       	ret

000000fc <sendString>:

void sendString(unsigned char *str)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	ec 01       	movw	r28, r24
	int i = 0;
	while(str[i]!='\0')
 102:	88 81       	ld	r24, Y
 104:	88 23       	and	r24, r24
 106:	31 f0       	breq	.+12     	; 0x114 <sendString+0x18>
	_delay_ms(20);
	PORTB &= ~(1<<E);
	PORTD = 0;
}

void sendString(unsigned char *str)
 108:	21 96       	adiw	r28, 0x01	; 1
{
	int i = 0;
	while(str[i]!='\0')
	{
		sendData(str[i]);
 10a:	0e 94 72 00 	call	0xe4	; 0xe4 <sendData>
}

void sendString(unsigned char *str)
{
	int i = 0;
	while(str[i]!='\0')
 10e:	89 91       	ld	r24, Y+
 110:	88 23       	and	r24, r24
 112:	d9 f7       	brne	.-10     	; 0x10a <sendString+0xe>
	{
		sendData(str[i]);
		i++;
	}
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <main>:
#include <util/delay.h>
#include "lcd.h"

int main(void)
{
	DDRB = 0b00000011;
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b00011100;
 122:	8c e1       	ldi	r24, 0x1C	; 28
 124:	87 b9       	out	0x07, r24	; 7
	int i = 0;
	int j = 0;
	int o = 0;
	lcdInit();
 126:	0e 94 5f 00 	call	0xbe	; 0xbe <lcdInit>
	sendString("Function");
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 7e 00 	call	0xfc	; 0xfc <sendString>
	sendCmd(0xC0);
 132:	80 ec       	ldi	r24, 0xC0	; 192
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <sendCmd>
	sendString("Generator v1.0");
 138:	89 e0       	ldi	r24, 0x09	; 9
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 7e 00 	call	0xfc	; 0xfc <sendString>
 140:	8f e3       	ldi	r24, 0x3F	; 63
 142:	9d e0       	ldi	r25, 0x0D	; 13
 144:	a3 e0       	ldi	r26, 0x03	; 3
 146:	81 50       	subi	r24, 0x01	; 1
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	a0 40       	sbci	r26, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x2c>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x36>
 150:	00 00       	nop
	_delay_ms(1000);
	sendCmd(0x01);
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 53 00 	call	0xa6	; 0xa6 <sendCmd>
	sendCmd(0x80);
 158:	80 e8       	ldi	r24, 0x80	; 128
 15a:	0e 94 53 00 	call	0xa6	; 0xa6 <sendCmd>
	sendString("Generator: ");
 15e:	88 e1       	ldi	r24, 0x18	; 24
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 7e 00 	call	0xfc	; 0xfc <sendString>
	sendCmd(0xC0);
 166:	80 ec       	ldi	r24, 0xC0	; 192
 168:	0e 94 53 00 	call	0xa6	; 0xa6 <sendCmd>
	sendString("Wave: ");
 16c:	84 e2       	ldi	r24, 0x24	; 36
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 7e 00 	call	0xfc	; 0xfc <sendString>
	DDRB = 0b00000011;
	DDRD = 0xFF;
	DDRC = 0b00011100;
	int i = 0;
	int j = 0;
	int o = 0;
 174:	cc 24       	eor	r12, r12
 176:	dd 24       	eor	r13, r13
{
	DDRB = 0b00000011;
	DDRD = 0xFF;
	DDRC = 0b00011100;
	int i = 0;
	int j = 0;
 178:	00 e0       	ldi	r16, 0x00	; 0
 17a:	10 e0       	ldi	r17, 0x00	; 0
int main(void)
{
	DDRB = 0b00000011;
	DDRD = 0xFF;
	DDRC = 0b00011100;
	int i = 0;
 17c:	ee 24       	eor	r14, r14
 17e:	ff 24       	eor	r15, r15
		{
			i = 0;
		}
		if (j == 2)
		{
			j = 0;
 180:	aa 24       	eor	r10, r10
 182:	bb 24       	eor	r11, r11
				}
				j++;
			}
			else if (j == 0)
			{
				sendCmd(0xC0);
 184:	0f 2e       	mov	r0, r31
 186:	f6 e0       	ldi	r31, 0x06	; 6
 188:	4f 2e       	mov	r4, r31
 18a:	55 24       	eor	r5, r5
 18c:	f0 2d       	mov	r31, r0
				}
				else if (o == 2)
				{
					PORTC = 0b00010100;
				}
				j++;
 18e:	88 24       	eor	r8, r8
 190:	99 24       	eor	r9, r9
 192:	83 94       	inc	r8
				o = i;
				
			}
			else if (i == 0)
			{
				sendCmd(0x80);
 194:	0f 2e       	mov	r0, r31
 196:	fb e0       	ldi	r31, 0x0B	; 11
 198:	6f 2e       	mov	r6, r31
 19a:	77 24       	eor	r7, r7
 19c:	f0 2d       	mov	r31, r0
				for (int l=0;l<=10;l++)
				{
					sendCmd(0x14);
				}
				sendString("OFF");
 19e:	0f 2e       	mov	r0, r31
 1a0:	ff e2       	ldi	r31, 0x2F	; 47
 1a2:	2f 2e       	mov	r2, r31
 1a4:	f1 e0       	ldi	r31, 0x01	; 1
 1a6:	3f 2e       	mov	r3, r31
 1a8:	f0 2d       	mov	r31, r0
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <main+0x94>
		{
			i = 0;
		}
		if (j == 2)
		{
			j = 0;
 1ac:	85 01       	movw	r16, r10
	{
		if (i == 2)
		{
			i = 0;
		}
		if (j == 2)
 1ae:	02 30       	cpi	r16, 0x02	; 2
 1b0:	11 05       	cpc	r17, r1
 1b2:	e1 f3       	breq	.-8      	; 0x1ac <main+0x92>
		{
			j = 0;
		}
		else if (PINC & (1<<0))
 1b4:	30 9b       	sbis	0x06, 0	; 6
 1b6:	2c c0       	rjmp	.+88     	; 0x210 <main+0xf6>
		{
			if (i == 1)
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	e9 16       	cp	r14, r25
 1bc:	f1 04       	cpc	r15, r1
 1be:	a9 f4       	brne	.+42     	; 0x1ea <main+0xd0>
			{	
				sendCmd(0x80);
 1c0:	80 e8       	ldi	r24, 0x80	; 128
 1c2:	0e 94 53 00 	call	0xa6	; 0xa6 <sendCmd>
 1c6:	e3 01       	movw	r28, r6
				for (int k=0;k<=10;k++)
				{
					sendCmd(0x14);
 1c8:	84 e1       	ldi	r24, 0x14	; 20
 1ca:	0e 94 53 00 	call	0xa6	; 0xa6 <sendCmd>
 1ce:	21 97       	sbiw	r28, 0x01	; 1
		else if (PINC & (1<<0))
		{
			if (i == 1)
			{	
				sendCmd(0x80);
				for (int k=0;k<=10;k++)
 1d0:	d9 f7       	brne	.-10     	; 0x1c8 <main+0xae>
				{
					sendCmd(0x14);
				}
				sendString("ON ");
 1d2:	8b e2       	ldi	r24, 0x2B	; 43
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 7e 00 	call	0xfc	; 0xfc <sendString>
				PORTC = 0b00000100;
 1da:	a4 e0       	ldi	r26, 0x04	; 4
 1dc:	a8 b9       	out	0x08, r26	; 8
				i++;
				o = i;
 1de:	cc 24       	eor	r12, r12
 1e0:	dd 24       	eor	r13, r13
 1e2:	68 94       	set
 1e4:	c1 f8       	bld	r12, 1
	
	while(1)
	{
		if (i == 2)
		{
			i = 0;
 1e6:	75 01       	movw	r14, r10
 1e8:	e2 cf       	rjmp	.-60     	; 0x1ae <main+0x94>
				PORTC = 0b00000100;
				i++;
				o = i;
				
			}
			else if (i == 0)
 1ea:	e1 14       	cp	r14, r1
 1ec:	f1 04       	cpc	r15, r1
 1ee:	f9 f6       	brne	.-66     	; 0x1ae <main+0x94>
			{
				sendCmd(0x80);
 1f0:	80 e8       	ldi	r24, 0x80	; 128
 1f2:	0e 94 53 00 	call	0xa6	; 0xa6 <sendCmd>
 1f6:	e3 01       	movw	r28, r6
				for (int l=0;l<=10;l++)
				{
					sendCmd(0x14);
 1f8:	84 e1       	ldi	r24, 0x14	; 20
 1fa:	0e 94 53 00 	call	0xa6	; 0xa6 <sendCmd>
 1fe:	21 97       	sbiw	r28, 0x01	; 1
				
			}
			else if (i == 0)
			{
				sendCmd(0x80);
				for (int l=0;l<=10;l++)
 200:	d9 f7       	brne	.-10     	; 0x1f8 <main+0xde>
				{
					sendCmd(0x14);
				}
				sendString("OFF");
 202:	c1 01       	movw	r24, r2
 204:	0e 94 7e 00 	call	0xfc	; 0xfc <sendString>
				PORTC = 0;
 208:	18 b8       	out	0x08, r1	; 8
				i++;
				o = i;
 20a:	64 01       	movw	r12, r8
				{
					sendCmd(0x14);
				}
				sendString("OFF");
				PORTC = 0;
				i++;
 20c:	74 01       	movw	r14, r8
 20e:	cf cf       	rjmp	.-98     	; 0x1ae <main+0x94>
				o = i;
			}
							
		}
		
		else if (PINC & (1<<1))
 210:	31 9b       	sbis	0x06, 1	; 6
 212:	cd cf       	rjmp	.-102    	; 0x1ae <main+0x94>
		{
			if (j == 1)
 214:	01 30       	cpi	r16, 0x01	; 1
 216:	11 05       	cpc	r17, r1
 218:	e1 f4       	brne	.+56     	; 0x252 <main+0x138>
			{
				sendCmd(0xC0);
 21a:	80 ec       	ldi	r24, 0xC0	; 192
 21c:	0e 94 53 00 	call	0xa6	; 0xa6 <sendCmd>
 220:	e2 01       	movw	r28, r4
				for (int m=0;m<=5;m++)
				{
					sendCmd(0x14);
 222:	84 e1       	ldi	r24, 0x14	; 20
 224:	0e 94 53 00 	call	0xa6	; 0xa6 <sendCmd>
 228:	21 97       	sbiw	r28, 0x01	; 1
		else if (PINC & (1<<1))
		{
			if (j == 1)
			{
				sendCmd(0xC0);
				for (int m=0;m<=5;m++)
 22a:	d9 f7       	brne	.-10     	; 0x222 <main+0x108>
				{
					sendCmd(0x14);
				}
				sendString("Square");
 22c:	83 e3       	ldi	r24, 0x33	; 51
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	0e 94 7e 00 	call	0xfc	; 0xfc <sendString>
				if (o == 1)
 234:	b1 e0       	ldi	r27, 0x01	; 1
 236:	cb 16       	cp	r12, r27
 238:	d1 04       	cpc	r13, r1
 23a:	11 f4       	brne	.+4      	; 0x240 <main+0x126>
				{
					PORTC = 0;
 23c:	18 b8       	out	0x08, r1	; 8
 23e:	06 c0       	rjmp	.+12     	; 0x24c <main+0x132>
				}
				else if (o == 2)
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	c8 16       	cp	r12, r24
 244:	d1 04       	cpc	r13, r1
 246:	11 f4       	brne	.+4      	; 0x24c <main+0x132>
				{
					PORTC = 0b00001100;
 248:	9c e0       	ldi	r25, 0x0C	; 12
 24a:	98 b9       	out	0x08, r25	; 8
				}
				j++;
 24c:	02 e0       	ldi	r16, 0x02	; 2
 24e:	10 e0       	ldi	r17, 0x00	; 0
 250:	ae cf       	rjmp	.-164    	; 0x1ae <main+0x94>
			}
			else if (j == 0)
 252:	01 15       	cp	r16, r1
 254:	11 05       	cpc	r17, r1
 256:	09 f0       	breq	.+2      	; 0x25a <main+0x140>
 258:	aa cf       	rjmp	.-172    	; 0x1ae <main+0x94>
			{
				sendCmd(0xC0);
 25a:	80 ec       	ldi	r24, 0xC0	; 192
 25c:	0e 94 53 00 	call	0xa6	; 0xa6 <sendCmd>
 260:	e2 01       	movw	r28, r4
				for (int n=0;n<=5;n++)
				{
					sendCmd(0x14);
 262:	84 e1       	ldi	r24, 0x14	; 20
 264:	0e 94 53 00 	call	0xa6	; 0xa6 <sendCmd>
 268:	21 97       	sbiw	r28, 0x01	; 1
				j++;
			}
			else if (j == 0)
			{
				sendCmd(0xC0);
				for (int n=0;n<=5;n++)
 26a:	d9 f7       	brne	.-10     	; 0x262 <main+0x148>
				{
					sendCmd(0x14);
				}
				sendString("Sine  ");
 26c:	8a e3       	ldi	r24, 0x3A	; 58
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 7e 00 	call	0xfc	; 0xfc <sendString>
				if (o == 1 )
 274:	a1 e0       	ldi	r26, 0x01	; 1
 276:	ca 16       	cp	r12, r26
 278:	d1 04       	cpc	r13, r1
 27a:	11 f4       	brne	.+4      	; 0x280 <main+0x166>
				{
					PORTC = 0;
 27c:	18 b8       	out	0x08, r1	; 8
 27e:	06 c0       	rjmp	.+12     	; 0x28c <main+0x172>
				}
				else if (o == 2)
 280:	b2 e0       	ldi	r27, 0x02	; 2
 282:	cb 16       	cp	r12, r27
 284:	d1 04       	cpc	r13, r1
 286:	11 f4       	brne	.+4      	; 0x28c <main+0x172>
				{
					PORTC = 0b00010100;
 288:	84 e1       	ldi	r24, 0x14	; 20
 28a:	88 b9       	out	0x08, r24	; 8
				}
				j++;
 28c:	84 01       	movw	r16, r8
 28e:	8f cf       	rjmp	.-226    	; 0x1ae <main+0x94>

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
